# -*- coding: utf-8 -*-
"""TASK1. Linear Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OhNsuM5kbFNwn76nSMzsMBY0v4_Bg8XY

# Data Science & Business Analytics Internship

# Tasks 1 - (Level - Beginner)

## **Linear Regression with Python Scikit Learn**
In this section we will see how the Python Scikit-Learn library for machine learning can be used to implement regression functions. We will start with simple linear regression involving two variables.

### **Simple Linear Regression**
In this regression task we will predict the percentage of marks that a student is expected to score based upon the number of hours they studied. This is a simple linear regression task as it involves just two variables.

### Author: Tushant Agrawal

# DATA FILE SOURCE :  http://bit.ly/w-data
"""

# Commented out IPython magic to ensure Python compatibility.
# Importing all libraries required in this notebook
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
import warnings
warnings.filterwarnings("ignore") 
import seaborn as sns

# Reading data from remote link
url = "http://bit.ly/w-data"
df = pd.read_csv(url)
print("Data imported successfully")
df.head(10)

"""# ***Exploratory Data Analysis***"""

# checking the columns present
df.columns

# checking the Information of the Dataset
df.info()

# checking the Shape Of the Dataset
df.shape

# checking the Datatype of each Attribute 
df.dtypes

# Checking the presence of Missing or null values
df.isnull().sum()

# Check the Statistical Details of Dataset
df.describe(include="all").transpose()

"""# Data Visualization

Let's plot our data points on 2-D graph to eyeball our dataset and see if we can manually find any relationship between the data. We can create the plot with the following script:
"""

# Plotting pairplot
sns.pairplot(df,diag_kind='kde')

#Plotting jointplot
sns.jointplot(df['Hours'], df['Scores'], kind="reg", color='y')

#plotting distplot
sns.distplot(df['Scores'], kde=True, rug=True , color="Red")

# Plotting the distribution of scores
df.plot(x='Hours', y='Scores', style='o')  
plt.title('Hours vs Percentage')  
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Score')  
plt.show()

"""**From the graph above shown in Data Visualization section, we can clearly see that there is a positive linear relation between the number of hours studied and percentage of score.**

### **Preparing the data**

The next step is we have to divide the data into "attributes" (inputs) and "labels" (outputs).
"""

X = df.iloc[:, :-1].values  
y = df.iloc[:, 1].values

"""### ***Train-Test Spliting***
Now that we have our attributes and labels, the next step is to split this data into training and test sets. We'll do this by using Scikit-Learn's built-in train_test_split() method:
"""

from sklearn.model_selection import train_test_split  
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) #train:test - 80:20

"""### **Training the Algorithm**
We have split our data into training and testing sets, and now is finally the time to train our algorithm. 
"""

from sklearn.linear_model import LinearRegression  
regressor = LinearRegression()  
regressor.fit(X_train, y_train) 

print("Training complete.")

# Plotting the regression line
line = regressor.coef_*X+regressor.intercept_

# Plotting for the test data
plt.scatter(X, y)
plt.plot(X, line, 'r');
plt.show()

"""### **Making Predictions**
Now that we have trained our algorithm, it's time to make some predictions.
"""

print(X_test) # Testing data - In Hours
pred = regressor.predict(X_test) # Predicting the scores

# Comparing Actual vs Predicted
df = pd.DataFrame({'Actual': y_test, 'Predicted': pred})  
df

"""# Lastly the main objective of Predicting the score if a Student studies for 9.25 hrs/day through the model"""

# You can also test with your own data
hours = 9.25
n_pred = regressor.predict([[hours]])
print("If a student studies for 9.25 hours/day,")
print("The Predicted score will = {}".format(n_pred[0]))

"""### **Evaluating the model**
The final step is to evaluate the performance of algorithm. This step is particularly important to compare how well different algorithms perform on a particular dataset. For simplicity here, we have chosen the mean square error. There are many such metrics.
"""

#Here from scikit learn we are evaluating by checking the errors present
from sklearn import metrics  
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, pred))
print('Mean Squared Error:', metrics.mean_squared_error(y_test, pred))
print('Mean Root Square Error:',np.sqrt (metrics.mean_squared_error(y_test, pred)))

"""# Conclusion :- If a student studies for 9.25 hrs/day, the predicted score will be 93.69"""

